import numpy as np
from scipy.stats import boltzmann
import glob
import os
beta= 1.6666666666666667

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Cone7k1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_1.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[1],[2],[0])
                                    A==np.put(A[0],[2],[0])
                                    A==np.put(A[0],[3],[0])
                                    A==np.put(A[0],[4],[0])
                                    A==np.put(A[0],[5],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[3],[0])
                                    A==np.put(A[1],[4],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[2],[0])
                                    A==np.put(A[2],[3],[0])
                                    A==np.put(A[2],[4],[0])
                                    A==np.put(A[2],[7],[0])
                                    A==np.put(A[3],[1],[0])
                                    A==np.put(A[3],[2],[0])
                                    A==np.put(A[3],[3],[0])
                                    A==np.put(A[3],[4],[0])
                                    A==np.put(A[3],[6],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_2.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[4],[0])
                                    A==np.put(A[0],[3],[0])
                                    A==np.put(A[0],[5],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[0],[2],[0])
                                    A==np.put(A[1],[3],[0])
                                    A==np.put(A[1],[4],[0])
                                    A==np.put(A[1],[5],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[3],[0])
                                    A==np.put(A[2],[4],[0])
                                    A==np.put(A[2],[5],[0])
                                    A==np.put(A[2],[6],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_3.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[3],[0])
                                    A==np.put(A[0],[4],[0])
                                    A==np.put(A[0],[5],[0])
                                    A==np.put(A[0],[6],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[4],[0])
                                    A==np.put(A[1],[5],[0])
                                    A==np.put(A[1],[6],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[0],[0])
                                    A==np.put(A[2],[4],[0])
                                    A==np.put(A[2],[5],[0])
                                    A==np.put(A[2],[6],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_4.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[0],[0])
                                    A==np.put(A[0],[4],[0])
                                    A==np.put(A[0],[5],[0])
                                    A==np.put(A[0],[6],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[0],[0])
                                    A==np.put(A[1],[5],[0])
                                    A==np.put(A[1],[6],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[0],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[5],[0])
                                    A==np.put(A[2],[6],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_5.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[6],[0])
                                    A==np.put(A[0],[0],[0])
                                    A==np.put(A[0],[1],[0])
                                    A==np.put(A[0],[5],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[0],[0])
                                    A==np.put(A[1],[1],[0])
                                    A==np.put(A[1],[6],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[0],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[2],[0])
                                    A==np.put(A[2],[6],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_6.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[0],[0])
                                    A==np.put(A[0],[2],[0])
                                    A==np.put(A[0],[1],[0])
                                    A==np.put(A[0],[6],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[1],[0])
                                    A==np.put(A[1],[2],[0])
                                    A==np.put(A[1],[6],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[2],[0])
                                    A==np.put(A[2],[3],[0])
                                    A==np.put(A[2],[6],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_7.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[1],[0])
                                    A==np.put(A[0],[2],[0])
                                    A==np.put(A[0],[3],[0])
                                    A==np.put(A[0],[6],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[1],[0])
                                    A==np.put(A[1],[2],[0])
                                    A==np.put(A[1],[3],[0])
                                    A==np.put(A[1],[7],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[2],[0])
                                    A==np.put(A[2],[3],[0])
                                    A==np.put(A[2],[4],[0])
                                    A==np.put(A[2],[7],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

def Cone(n):
    #A=np.loadtxt("Matrix.txt")
    lambda_, N =0.4166666666666667, 19
    # lambda_, N = 0.29, 9
   # lambda_, N = 0.29, 17
   # lambda_, N = 0.35, 9
   #  lambda_, N = 0.8, 19
   #  lambda_, N = 0.45, 19
    r=0
 #   alist = [0]
    while r < n  :
          r=r+1
          A=np.loadtxt("Cone7k_8.txt")
          for j in range(3):
                for i in range(8):
                      if A[j].item(i)!=0:
                              print(np.put(A[j],[i],[0]))
                      elif A[j].item(i)==0:
                                  print(np.put(A[j],[i],[boltzmann.rvs(lambda_, N, size=1)]))
                                    A==np.put(A[0],[1],[0])
                                    A==np.put(A[0],[2],[0])
                                    A==np.put(A[0],[3],[0])
                                    A==np.put(A[0],[4],[0])
                                    A==np.put(A[0],[7],[0])
                                    A==np.put(A[1],[1],[0])
                                    A==np.put(A[1],[2],[0])
                                    A==np.put(A[1],[3],[0])
                                    A==np.put(A[1],[4],[0])
                                    A==np.put(A[2],[1],[0])
                                    A==np.put(A[2],[2],[0])
                                    A==np.put(A[2],[3],[0])
                                    A==np.put(A[2],[4],[0])
                                    A==np.put(A[2],[6],[0])
                                  print(A)
                                  np.savetxt('{}Cone5n1_c3.in'.format(r), A, delimiter=" ", newline=' ', header='amb_space 8 cone 3'.format(r), fmt="%d", footer='', comments='')
                                 # if r!=2*r:      
                                  #   alist = []
                                 #    alist.append(A)
                                  #   arr = np.array(alist)
                                     #np.savetxt( '{}MATRIX_DUAL_CONE_SIMB.txt'.format(2*r-1), A, delimiter="  " , fmt="%d")
                      else:
                                   print(np.put(A[j],[i],[-1]))
          r=r+1